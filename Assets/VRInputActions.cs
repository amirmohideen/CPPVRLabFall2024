//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.0
//     from Assets/VRInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @VRInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @VRInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VRInputActions"",
    ""maps"": [
        {
            ""name"": ""RightController"",
            ""id"": ""ee3225c2-019d-473d-8fbd-72c0fde414d1"",
            ""actions"": [
                {
                    ""name"": ""RightPrimaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""7793dd44-2fe8-4f5c-948a-4d8526e88c8e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightSecondaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""83168278-9b4c-4a5b-b956-5435add9a825"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0456d065-e8bd-4ffc-8d40-2e752024c0a0"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightPrimaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03818dcc-78c1-47f0-82a4-8cb94b8a0222"",
                    ""path"": ""<XRController>{RightHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightSecondaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // RightController
        m_RightController = asset.FindActionMap("RightController", throwIfNotFound: true);
        m_RightController_RightPrimaryButton = m_RightController.FindAction("RightPrimaryButton", throwIfNotFound: true);
        m_RightController_RightSecondaryButton = m_RightController.FindAction("RightSecondaryButton", throwIfNotFound: true);
    }

    ~@VRInputActions()
    {
        UnityEngine.Debug.Assert(!m_RightController.enabled, "This will cause a leak and performance issues, VRInputActions.RightController.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // RightController
    private readonly InputActionMap m_RightController;
    private List<IRightControllerActions> m_RightControllerActionsCallbackInterfaces = new List<IRightControllerActions>();
    private readonly InputAction m_RightController_RightPrimaryButton;
    private readonly InputAction m_RightController_RightSecondaryButton;
    public struct RightControllerActions
    {
        private @VRInputActions m_Wrapper;
        public RightControllerActions(@VRInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @RightPrimaryButton => m_Wrapper.m_RightController_RightPrimaryButton;
        public InputAction @RightSecondaryButton => m_Wrapper.m_RightController_RightSecondaryButton;
        public InputActionMap Get() { return m_Wrapper.m_RightController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightControllerActions set) { return set.Get(); }
        public void AddCallbacks(IRightControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_RightControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RightControllerActionsCallbackInterfaces.Add(instance);
            @RightPrimaryButton.started += instance.OnRightPrimaryButton;
            @RightPrimaryButton.performed += instance.OnRightPrimaryButton;
            @RightPrimaryButton.canceled += instance.OnRightPrimaryButton;
            @RightSecondaryButton.started += instance.OnRightSecondaryButton;
            @RightSecondaryButton.performed += instance.OnRightSecondaryButton;
            @RightSecondaryButton.canceled += instance.OnRightSecondaryButton;
        }

        private void UnregisterCallbacks(IRightControllerActions instance)
        {
            @RightPrimaryButton.started -= instance.OnRightPrimaryButton;
            @RightPrimaryButton.performed -= instance.OnRightPrimaryButton;
            @RightPrimaryButton.canceled -= instance.OnRightPrimaryButton;
            @RightSecondaryButton.started -= instance.OnRightSecondaryButton;
            @RightSecondaryButton.performed -= instance.OnRightSecondaryButton;
            @RightSecondaryButton.canceled -= instance.OnRightSecondaryButton;
        }

        public void RemoveCallbacks(IRightControllerActions instance)
        {
            if (m_Wrapper.m_RightControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRightControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_RightControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RightControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RightControllerActions @RightController => new RightControllerActions(this);
    public interface IRightControllerActions
    {
        void OnRightPrimaryButton(InputAction.CallbackContext context);
        void OnRightSecondaryButton(InputAction.CallbackContext context);
    }
}
